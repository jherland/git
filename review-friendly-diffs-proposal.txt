Subject: Feature idea for friendlier diffs

Situation

Suppose I'm preparing a patch where some parts of the diff are more
relevant/interesting to you (the reviewers) than others, e.g.:

 -  I want some files listed before others in the file (relevant diff
    option: -O<orderfile>)

 -  I'm deleting/moving/copying files and want to highlight the changed
    lines (relevant diff options: -M, -C, -D)

 -  I'm reindenting a lot of code and want to highlight non-whitespace
    changes (relevant diff options: -b, -w, --ignore-blank-lines)


Problem

There is no standard tooling to convey this preferred way of
displaying the diff from me (the author) to you (the reviewer). Some
alternatives:

 -  In email-based workflows, I could use some of these options when
    generating the patch, but since the patch is both the diff that you
    view _and_ the change that gets committed, I have to be very careful
    that the resulting patch can still be applied safely and correctly.
    In practice, this means I almost never use any of these options, and
    you'll either have to recreate a more viewable diff on your end, or
    simply live with the poorer diff.

 -  In pull-request (or other commit-based) workflows, I have no way of
    controlling or suggesting how the diff is displayed to you.

I sometimes end up writing hints to reviewers into the commit message
itself, for example:

 -  "Lots of renames here, please use -M when reviewing."

 -  "Look at the foo.h header first, to make sense of the rest."


Proposal

 1. Add an --order-files option to 'git diff'. --order-files is an
    in-line version of -O (aka. diff.orderFile) that provides a comma-
    separated(?) list of ordering patterns directly on the command line,
    e.g.:

        git diff --order-files="*.h,*.c"

    is equivalent to (in bash):

        git diff -O <(echo '*.h *.c' | tr ' ' '\n')

    This allows more ad hoc use of file reordering in diffs.

 2. Create a convention/protocol for communicating suggested/preferred
    diff options in the commit message. For example, by adding

      Review-Options: --order-files=*.h,*.c -M

    to my commit message trailers, I tell reviewers how I'd like for
    them to view my commit diff.

    The allowable diff options in this directive should be filtered to
    a subset that cannot be used maliciously, or does not intentionally
    hide important details from reviewers (e.g. passing stuff like
    --output=/etc/passwd, --no-patch, --shortstat, or --name-only is
    Right Out). See [1] for more details.

 3. Teach tools that show the commitdiff (git-show, git-log, gitweb,
    gitk, etc.) to optionally look at the Review-Options trailer and
    apply it (filtered) to the diff they generate below the commit
    message.

    Add config directive and/or command-line options to enable/disable
    this behavior.

    The Review-Options _must_ be disregarded when the commitdiff is
    generated for "machine" consumption, e.g. format-patch/send-email.


Discussion

This allows authors to prepare patches with hints on how to review
them, and it gives reviewers the option to automatically use those
hints to make the review easier.

Unfortunately, in email-based workflows, the patch text in the email
itself itself cannot be generated with these options (as it's used
both for review and for the actual commit), but one could imagine
custom intergration between the reviewer's email reader and the
local git repo where the patch was applied to the repo and a review-
friendly diff was returned to the email reader.

For other workflows, though, (e.g. Github-style pull requests) this
could work very well (provided the review tooling is taught to obey
the Review-Options trailer when generating diffs for review).


[1]: Browsing through git-diff(1), here are the options that at first
glance seems safe and useful to allow in Review-Options:

    -U<n>, --unified=<n>
    --indent-heuristic
    --no-indent-heuristic
    --minimal
    --patience
    --histogram
    --anchored=<text>
    --diff-algorithm={patience|minimal|histogram|myers}
    --submodule[=<format>]
    --word-diff[=<mode>]
    --word-diff-regex=<regex>
    --no-renames
    --[no-]rename-empty
    --ws-error-highlight=<kind>
    -B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]
    -M[<n>], --find-renames[=<n>]
    -C[<n>], --find-copies[=<n>]
    --find-copies-harder
    -D, --irreversible-delete
    -l<num>
    -O<orderfile>
    --order-files=<pattern[,...]>
    -a, --text
    --ignore-cr-at-eol
    --ignore-space-at-eol
    -b, --ignore-space-change
    -w, --ignore-all-space
    --ignore-blank-lines
    --inter-hunk-context=<lines>
    -W, --function-context
